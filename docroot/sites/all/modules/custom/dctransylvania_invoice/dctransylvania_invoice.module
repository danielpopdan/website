<?php

/**
 * @file
 * Invoice PDF functions.
 */

/**
 * Implements hook_preprocess_entity().
 *
 * Adds theme hook suggestions for the pdf.
 */
function dctransylvania_invoice_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  $view_mode = $variables['view_mode'];
  $pdf_view_modes = array('pdf', 'canceled');
  if ($entity_type == 'commerce_order' && in_array($view_mode, $pdf_view_modes)) {
    dctransylvania_invoice_replace_tokens($variables);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dctransylvania_invoice_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'dctransylvania_invoice');

  $theme_registry['commerce_order__commerce_order__pdf']['preprocess functions'][] = 'template_preprocess_commerce_order';

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/theme/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Replace token in generated pdf.
 *
 * @param array $variables
 *   Passed variables.
 */
function dctransylvania_invoice_replace_tokens(&$variables) {
  $tokens = dctransylvania_invoice_generate_tokens($variables);
  $targets = array(
    'invoice_header' => '#markup',
    'invoice_text' => '#markup',
    'invoice_footer' => '#markup',
  );

  foreach ($targets as $id => $type) {
    preg_match_all('/\[#(.*?)#\]/s', $variables['content'][$id][$type], $matches);
    if (isset($matches[0])) {
      foreach ($matches[0] as $key => $token) {
        $bodytag = str_replace($token, $tokens[$matches[1][$key]], $variables['content'][$id][$type]);
        $variables['content'][$id][$type] = $bodytag;
      }
    }
  }
  $variables['content']['commerce_line_items'][0]['#markup'] = dctransylvania_invoice_get_line_items($variables['elements']['#entity']);
}

/**
 * Generate PDF tokens.
 *
 * @param array $variables
 *   The passed varibales array.
 *
 * @return array
 *   A list of tokens.
 */
function dctransylvania_invoice_generate_tokens($variables) {

  $uid = $variables['elements']['#entity']->uid;
  $user = user_load($uid);

  $billing_address = dctransylvania_invoice_get_billing($variables['elements']['#entity']->commerce_customer_billing['und'][0]['profile_id']);

  $payment_method = explode('|', $variables['elements']['#entity']->data['payment_method']);
  $payment_method = commerce_payment_method_load($payment_method[0]);

  $order_wrapper = entity_metadata_wrapper('commerce_order', $variables['elements']['#entity']);
  $order_total = $order_wrapper->commerce_order_total->value();
  $total_ex_vat = commerce_price_component_total($order_total, 'base_price');
  $total_vat = commerce_price_component_total($order_total, 'tax|tva_24');
watchdog('dct', '<pre>' . print_r($billing_address, true));
  return array(
    'cumparator_name' => $billing_address['name_line'],
    'adresa_facturare' => $billing_address['thoroughfare']
    . '<br/>' . $billing_address['locality'] . ' ' . $billing_address['postal_code'],
//    . '<br/> ' . $billing_address['country'],
//    . '<br/> ' . $billing_address['cif'],
//    . '<br/> ' . $billing_address['cif'],
    'telefon' => '-',
    'nr_comanda' => $variables['elements']['#entity']->order_number,
    'modalitate_plata' => $payment_method['title'],
    'data_facturii' => date('d.m.Y', $variables['elements']['#entity']->created),
    'valoare_total_fara_tva' => commerce_currency_format(($order_total['amount'] - $total_vat['amount']), $order_total['currency_code']),
    'valoare_tva' => commerce_currency_format($total_vat['amount'], $order_total['currency_code']),
    'total_factura' => commerce_currency_format($order_total['amount'], $order_total['currency_code']),
  );
}

/**
 * Return the billing profile.
 *
 * @param int $pid
 *   Profile ID.
 *
 * @return array
 *   The billing profile.
 */
function dctransylvania_invoice_get_billing($pid) {
  static $html;
  if ($html) {
    return $html;
  }
  // Billing address.
  $billing = entity_load('commerce_customer_profile', array($pid));

  return reset($billing)->commerce_customer_address[LANGUAGE_NONE][0];
}

/**
 * Return a view of line items.
 *
 * @param object $order
 *   The order object.
 *
 * @return array
 *   The rendered view.
 */
function dctransylvania_invoice_get_line_items($order) {
  $view = views_get_view('commerce_line_item_table');
  $view->set_display('block_invoice_line_items');
  $view->set_arguments([$order->order_id]);
  $view->pre_execute();
  $view->execute();
  return $view->render();
}
