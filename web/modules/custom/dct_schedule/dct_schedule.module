<?php

/**
 * @file
 * Contains hook implementations().
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Defines the starting hour of the conferece schedule.
 */
define('DCT_SCHEDULE_STARTING_HOUR', 8);

/**
 * Implements hook_theme().
 */
function dct_schedule_theme() {
  return [
    'dct_schedule' => [
      'variables' => [
        'sessions' => NULL,
        'days' => NULL,
        'rooms' => NULL,
      ],
    ],
    'dct_my_schedule' => [
      'variables' => [
        'sessions' => NULL,
        'days' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_view().
 */
function dct_schedule_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'session' && $view_mode == 'teaser') {
    $speakers = [];
    // Get the speakers with first and last name.
    foreach ($entity->get('field_speakers')->getValue() as $speaker) {
      $speaker = Drupal::entityTypeManager()
        ->getStorage('user')
        ->load($speaker['target_id']);
      $speakers[$speaker->id()] = [
        '#type' => 'link',
        '#title' => $speaker->get('field_first_name')->value . ' ' . $speaker->get('field_last_name')->value,
        '#url' => Url::fromRoute('entity.user.canonical', ['user' => $speaker->id()])
      ];
      // If there is any other speaker, add a comma between them.
      if (count($speakers) > 1) {
        $speakers[$speaker->id()]['#prefix'] = ', ';
      }
    }
    $build['speakers'] = $speakers;
    // Generate the title.
    $build['display_title'] = [
      '#type' => 'link',
      '#title' => $entity->label(),
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => $entity->id()]),
    ];
    // Generate the difficulty output.
    $difficulties = [
      'Beginner' => '1',
      'Intermediate' => '2',
      'Advanced' => '3',
    ];
    $has_difficulty = FALSE;
    for ($i = 1; $i <= 3; $i++) {
      $build['difficulty'][$i] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'schedule-item--rating-block',
          ],
        ],
      ];
      if ($i <= $difficulties[$entity->get('field_list_select')->value]) {
        $build['difficulty'][$i]['#attributes']['class'][] = 'rating-active';
        $has_difficulty = TRUE;
      }
    }
    if (empty($has_difficulty)) {
      unset($build['difficulty']);
    }
    // Calculate the session end time based on duration and starting hour.
    $session_duration = $entity->get('field_select_list')->value;
    $session_start = $entity->get('field_hour')->value;
    $session_start_hour = intdiv(($session_start - 1), 4) + DCT_SCHEDULE_STARTING_HOUR;
    $session_start_minutes = ($session_start - 1) % 4 * 15;
    $session_end_minutes = $session_start_minutes + $session_duration;
    $session_end_hour = $session_start_hour + intdiv($session_end_minutes, 60);
    $session_end_minutes = $session_end_minutes % 60;
    $start_time = _dct_schedule_format_hour($session_start_hour) . ':' . _dct_schedule_format_hour($session_start_minutes);
    $end_time = _dct_schedule_format_hour($session_end_hour) . ':' . _dct_schedule_format_hour($session_end_minutes);
    $build['session_hours'] = [
      '#markup' => $start_time . '-' . $end_time,
    ];
    $session_duration += $session_duration/5;
    // Set the duration to expose in HTML.
    $build['session_duration'] = [
      '#markup' =>  $session_duration,
    ];
    // Set the height to expose in HTML.
    $build['field_height'] = [
      '#markup' =>  $entity->get('field_height')->value . 'px',
    ];
  }

  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'breaks_social_activities' && $view_mode == 'teaser') {
    // Calculate the session end time based on duration and starting hour.
    $session_duration = $entity->get('field_duration')->value;
    $session_start = $entity->get('field_hour')->value;
    $session_start_hour = intdiv(($session_start - 1), 4) + DCT_SCHEDULE_STARTING_HOUR;
    $session_start_minutes = ($session_start - 1) % 4 * 15;
    $session_end_minutes = $session_start_minutes + $session_duration;
    $session_end_hour = $session_start_hour + intdiv($session_end_minutes, 60);
    $session_end_minutes = $session_end_minutes % 60;
    $start_time = _dct_schedule_format_hour($session_start_hour) . ':' . _dct_schedule_format_hour($session_start_minutes);
    $end_time = _dct_schedule_format_hour($session_end_hour) . ':' . _dct_schedule_format_hour($session_end_minutes);
    $build['session_hours'] = [
      '#markup' => $start_time . '-' . $end_time,
    ];
    // Set the duration to expose in HTML.
    $build['session_duration'] = [
      '#markup' =>  $session_duration,
    ];
    // Set the height to expose in HTML.
    $build['field_height'] = [
      '#markup' =>  $entity->get('field_height')->value . 'px',
    ];
  }

}

/**
 * Format a number to 2 digits.
 *
 * @param int $number
 *   The number to format.
 *
 * @return string
 *   The formatted number.
 */
function _dct_schedule_format_hour($number) {
  return ($number < 10) ? '0' . $number : $number;
}
